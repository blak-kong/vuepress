(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{217:function(t,e,v){"use strict";v.r(e);var _=v(6),s=Object(_.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h2",{attrs:{id:"前言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),v("p",[t._v("在解释事件循环之前首先先解释一下浏览器的执行线程：")]),t._v(" "),v("p",[t._v("浏览器是多进程的，浏览器每一个 tab 标签都代表一个独立的进程，其中浏览器渲染进程（浏览器内核）属于浏览器多进程中的一种，主要负责页面渲染，脚本执行，事件处理等。")]),t._v(" "),v("p",[t._v("其包含的线程有：GUI 渲染线程（负责渲染页面，解析 HTML，CSS 构成 DOM 树）、JS 引擎线程、事件触发线程、定时器触发线程、http 请求线程等主要线程")]),t._v(" "),v("p",[t._v("关于执行中的线程：")]),t._v(" "),v("p",[t._v("主线程 js 引擎执行的线程，这个线程只有一个，主要负责处理 Javascript 脚本程序，例如 V8 引擎。")]),t._v(" "),v("p",[t._v("工作线程：也称幕后线程，这个线程存在于浏览器，与主线程是分开的，处理文件读取、网络请求等异步事件。")]),t._v(" "),v("p",[t._v("详情点击链接跳转 👉"),v("a",{attrs:{href:"https://imweb.io/topic/58e3bfa845e5c13468f567d5",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器进程？线程？傻傻分不清楚！ - 腾讯 Web 前端 IMWeb 团队社区"),v("OutboundLink")],1)]),t._v(" "),v("h2",{attrs:{id:"任务队列"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#任务队列"}},[t._v("#")]),t._v(" 任务队列")]),t._v(" "),v("p",[t._v("JavaScript 中所有的任务都可以分为同步任务和异步任务。")]),t._v(" "),v("ul",[v("li",[t._v("同步任务，顾名思义，就是立即执行的任务，同步任务一般会直接进入到主线程中执行；")]),t._v(" "),v("li",[t._v("异步任务，就是异步执行的任务，比如 ajax 网络请求，setTimeout 定时函数等都属于异步任务。")])]),t._v(" "),v("p",[v("strong",[t._v("异步任务会通过任务队列的机制(先进先出的机制)来进行协调。")])]),t._v(" "),v("p",[t._v("具体流程用下面的图来说明：")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-1337770fcc29d10325ee4eb127496fff_720w.jpg",alt:"事件循环"}})]),t._v(" "),v("h3",{attrs:{id:"任务队列中的任务何时进入主线程？"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#任务队列中的任务何时进入主线程？"}},[t._v("#")]),t._v(" 任务队列中的任务何时进入主线程？")]),t._v(" "),v("p",[v("img",{attrs:{src:"https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/executionContext2.jpg",alt:"队列"}})]),t._v(" "),v("p",[t._v("这里分成三个步骤解释：")]),t._v(" "),v("p",[t._v("1、所有同步任务都在主线程上执行，形成一个执行栈")]),t._v(" "),v("p",[t._v('2、执行栈之外，还存在一个"消息队列"。只要异步操作执行完成，就到消息队列中排队等待回调')]),t._v(" "),v("p",[t._v("3、一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取消息队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈，开始执行")]),t._v(" "),v("p",[t._v("4、主线程不断重复上面的第三步")]),t._v(" "),v("h2",{attrs:{id:"微任务与宏任务的概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#微任务与宏任务的概念"}},[t._v("#")]),t._v(" 微任务与宏任务的概念")]),t._v(" "),v("p",[t._v("微任务常用面试题")]),t._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",{pre:!0,attrs:{class:"language-text"}},[v("code",[t._v("setTimeout(_ => console.log(4))\n\nnew Promise(resolve => {\n  resolve()\n  console.log(1)\n}).then(_ => {\n  console.log(3)\n})\n\nconsole.log(2)\n\n// 1 2 3 4\n")])])]),v("p",[v("strong",[t._v("为什么第一个 setTimeout 最后执行？")])]),t._v(" "),v("p",[t._v("因为宏任务直接进入任务队列，而 Promise 实际上是微任务(同步任务)。")]),t._v(" "),v("p",[v("strong",[t._v("Promise 真的是微任务吗？它的 "),v("code",[t._v("then()")]),t._v(" 方法是异步宏任务？")])]),t._v(" "),v("p",[t._v("Promise 的 "),v("code",[t._v("then()")]),t._v(" 方法内部确实存在"),v("br"),t._v("\n异步任务，但")]),t._v(" "),v("p",[t._v("promise 函数在尾调用 "),v("code",[t._v("then()")]),t._v(" 前的代码是微任务，所以会同步执行。")]),t._v(" "),v("h3",{attrs:{id:"微任务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#微任务"}},[t._v("#")]),t._v(" 微任务")]),t._v(" "),v("p",[t._v("同步：Promise、process.nextTick（node 环境）、Object.observe, MutationObserver")]),t._v(" "),v("h3",{attrs:{id:"宏任务"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#宏任务"}},[t._v("#")]),t._v(" 宏任务")]),t._v(" "),v("p",[t._v("异步：setTimeout、setInterval、XMLHttprequest、setImmediate、I/O、UI rendering")]),t._v(" "),v("h2",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),v("p",[t._v("浏览器执行的顺序：")]),t._v(" "),v("ul",[v("li",[t._v("js 引擎会使用解释器去对源代码进行词法分析，构建成抽象语法树，然后再执行。")]),t._v(" "),v("li",[t._v("js 会先执行全局函数作用域中的所有同步任务，期间遇到异步任务，会按顺序放入任务队列。")]),t._v(" "),v("li",[t._v("假如同步任务的执行过程（局部函数作用域）中调用了异步任务，会优先执行同步任务中的异步（上下文环境不同，会开启一个局部任务队列，一般叫做微任务）。")]),t._v(" "),v("li",[t._v("每次准备去执行第一个宏任务前，都要将所有的微任务一个一个取出来执行")]),t._v(" "),v("li",[t._v("对于 then 的链式调用，只有当前 then 的上一个 then 执行完毕之后，当前 then 才会被加入微任务队列")])]),t._v(" "),v("p",[t._v("then() 方法的实现是使用了异步进行回调，但因为局部作用域，所有是微任务。")])])}),[],!1,null,null,null);e.default=s.exports}}]);