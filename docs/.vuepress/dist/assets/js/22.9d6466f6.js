(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{200:function(t,s,a){"use strict";a.r(s);var n=a(6),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),a("p",[t._v("关于执行上下文与执行栈、执行过程，已经告一段落。")]),t._v(" "),a("p",[t._v("这一章你会了解到:")]),t._v(" "),a("ul",[a("li",[t._v("三种"),a("strong",[t._v("数据结构")]),t._v(": 堆(heap)、栈(stack)、队列(queue)")]),t._v(" "),a("li",[t._v("变量的存放")]),t._v(" "),a("li",[t._v("内存空间管理")])]),t._v(" "),a("p",[a("strong",[t._v("注意：栈内存可以理解为当前栈的内存。栈内存与当前执行上下文绑定，仍旧是后进先出。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://image-static.segmentfault.com/171/508/1715085953-5b0fa8a11c20c_articlex",alt:"栈内存与堆内存"}})]),t._v(" "),a("p",[t._v("队列严格意义上是 JavaScript 中的高级概念“并发模型”，具体运行过程比之单一概念更加复杂。")]),t._v(" "),a("h2",{attrs:{id:"三种数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三种数据结构"}},[t._v("#")]),t._v(" 三种数据结构")]),t._v(" "),a("p",[a("code",[t._v("JS")]),t._v("中三种重要的数据结构, 如图:")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/executionContext2.jpg",alt:"img1"}})]),t._v(" "),a("p",[t._v("(图片来源"),a("a",{attrs:{href:"https://juejin.im/post/5d870e6651882517a0319aa8",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端九五六-Javascript 内存空间管理"),a("OutboundLink")],1),t._v(")")]),t._v(" "),a("h2",{attrs:{id:"栈数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#栈数据结构"}},[t._v("#")]),t._v(" 栈数据结构")]),t._v(" "),a("p",[a("strong",[t._v("栈的特点")]),t._v(": 后进先出（LIFO）的结构.")]),t._v(" "),a("p",[t._v("（"),a("code",[t._v("LIFO")]),t._v(": "),a("code",[t._v("last-in, first-out")]),t._v("，类似于向乒乓球桶中放球，最先放入的球最后取出）")]),t._v(" "),a("p",[t._v("这里还是贴上一张网图方便大家理解的好:")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/executionContext3.png",alt:"img2"}})]),t._v(" "),a("p",[t._v("栈中的数据就像是一个个乒乓球, 最先进去的最后出来.")]),t._v(" "),a("p",[a("strong",[t._v("注⚠️")])]),t._v(" "),a("p",[t._v("这里所说的"),a("strong",[t._v("进栈")]),t._v("和"),a("strong",[t._v("出栈")]),t._v("不是指赋值算进, 使用算出. 而是指"),a("strong",[t._v("赋值算进, 被清理算出")]),t._v(", 而且位于同一函数作用域下的变量, 应该是在栈的同一层.")]),t._v(" "),a("p",[t._v("所谓的变量存储于栈内存中的栈，传统意义上说指的是由内存自动创建分配的空间，例如函数的参数值与局部变量，只是其操作方式类似于栈操作，所以叫栈内存。")]),t._v(" "),a("p",[t._v("比如函数调用其实就相当于栈的形式:")]),t._v(" "),a("p",[a("strong",[t._v("例子🌰")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("如上, 声明的顺序是"),a("code",[t._v("1, 2, 3")]),t._v(" , 但是释放的顺序是为"),a("code",[t._v("3, 2, 1")]),t._v(" .")]),t._v(" "),a("p",[t._v("这里释放按照这个顺序是因为 "),a("code",[t._v("3")]),t._v("最先执行完, 所以最先被释放.")]),t._v(" "),a("h2",{attrs:{id:"堆数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆数据结构"}},[t._v("#")]),t._v(" 堆数据结构")]),t._v(" "),a("p",[t._v("一种树状结构。好比 "),a("code",[t._v("JSON")]),t._v(" 格式中的数据，你有 "),a("code",[t._v("key")]),t._v("，我有对应的 "),a("code",[t._v("value")]),t._v(", 就立马返给你。")]),t._v(" "),a("p",[t._v("因为我们知道"),a("code",[t._v("JSON")]),t._v("格式的存储是无序的, 所以没有先后顺序, 所以它是一种绝对公平的数据结构。")]),t._v(" "),a("p",[a("strong",[t._v("注意：引用类型都会开辟堆内存。同时v8特性，有this指向堆内存保持着引用，该内存就不会释放。")])]),t._v(" "),a("p",[t._v("如图所示:")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/executionContext4.png",alt:"img3"}}),t._v(" "),a("h2",{attrs:{id:"队列数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#队列数据结构"}},[t._v("#")]),t._v(" 队列数据结构")]),t._v(" "),a("p",[t._v("队列数据结构不同于堆, 队列是一种 "),a("strong",[t._v("先进先出(FIFO)")]),t._v(" 的数据结构.")]),t._v(" "),a("p",[t._v("它也是 "),a("strong",[t._v("事件循环(Event Loop)")]),t._v(" 的基础结构.")]),t._v(" "),a("p",[t._v("如图所示:")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/executionContext5.png",alt:"img4"}}),t._v(" "),a("p",[t._v("最先进入队列的任务最先出来, 类似于排队买菜, 排在前面的人先买，并且买完所有菜。才能轮到下一个人（事件）。")]),t._v(" "),a("blockquote",[a("p",[t._v("队列的函数处理会一直进行到执行栈再次为空为止，然后事件循环将会处理队列中的下一个消息（如果还有的话）。")])]),t._v(" "),a("p",[t._v("对于 "),a("strong",[t._v("队列（事件循环）")]),t._v(" ，展开来说还有微任务与宏任务。微任务对应执行栈，宏任务对应队列。")]),t._v(" "),a("h2",{attrs:{id:"变量对不同内存的引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量对不同内存的引用"}},[t._v("#")]),t._v(" 变量对不同内存的引用")]),t._v(" "),a("h3",{attrs:{id:"变量的存放"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量的存放"}},[t._v("#")]),t._v(" 变量的存放")]),t._v(" "),a("p",[t._v("通过上面的介绍我们知道了, 内存中有堆了栈, 那么"),a("code",[t._v("JS")]),t._v("变量具体是存放在哪里呢?")]),t._v(" "),a("ul",[a("li",[t._v("基本数据类型保存在 "),a("strong",[t._v("栈内存")]),t._v("，与该内存与执行上下文绑定，出栈后自动销毁;")]),t._v(" "),a("li",[t._v("引用数据类型保存在 "),a("strong",[t._v("堆内存")]),t._v("，变量保存了 this 引用，与堆内存绑定，需要 V8 垃圾回收.")])]),t._v(" "),a("ol",[a("li",[t._v("基本数据类型6种: "),a("code",[t._v("Undefined、Null、Boolean、Number、String、Symbol")]),t._v(", 由于他们在内存中分别占有固定大小的空间, 通过按值来访问.")]),t._v(" "),a("li",[t._v("引用数据类型: 也就是"),a("code",[t._v("Object")]),t._v("对象, 它的存储分为"),a("strong",[t._v("访问地址")]),t._v("和"),a("strong",[t._v("实际存放的地方")]),t._v("; 访问地址是存储在"),a("strong",[t._v("栈")]),t._v("中的, 当查询引用类型变量的时候, 会先从"),a("strong",[t._v("栈")]),t._v("中读取内存地址(也就是访问地址), 然后再通过地址找到"),a("strong",[t._v("堆")]),t._v("中的值.因此, 这种我们也把它叫为"),a("strong",[t._v("引用访问")]),t._v(".")])]),t._v(" "),a("p",[a("em",[t._v("一张图方便你理解")]),t._v("🤔")]),t._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/executionContext6.png",alt:"img5"}}),t._v(" "),a("blockquote",[a("p",[t._v("在计算机的数据结构中，栈比堆的运算速度快，Object是一个复杂的结构且可以扩展：数组可扩充，对象可添加属性，都可以增删改查。将他们放在堆中是为了不影响栈的效率。而是通过引用的方式查找到堆中的实际对象再进行操作。所以查找引用类型值的时候先去"),a("strong",[t._v("栈")]),t._v("查找再去"),a("strong",[t._v("堆")]),t._v("查找。")])]),t._v(" "),a("h3",{attrs:{id:"变量存放案例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量存放案例"}},[t._v("#")]),t._v(" 变量存放案例")]),t._v(" "),a("p",[t._v("要是你读完了上面的"),a("strong",[t._v("堆栈存储")]),t._v("介绍还有点模糊的话, 我们不妨来看几个案例.")]),t._v(" "),a("p",[a("strong",[t._v("案例一🌰")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a = 1")]),t._v("\n")])])]),a("p",[a("strong",[t._v("案例二🌰")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// obj1.a = 3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 变量保存引用类型，只能保存到一个引用地址，变量与堆内存不直接绑定！")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// obj1 和 obj2 都保存了同一个引用地址，指向同一个堆内存，所以堆内存改变会一起改变")]),t._v("\n")])])]),a("p",[a("strong",[t._v("案例三🌰")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// obj2 = { a: 1 }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 虽然前面 obj1、obj2 都保存了堆内存地址，但后面只有 obj1 把保存的值改成null，所以并不影响 obj2 保存的引用地址指向堆内存。")]),t._v("\n")])])]),a("h3",{attrs:{id:"内存空间管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存空间管理"}},[t._v("#")]),t._v(" 内存空间管理")]),t._v(" "),a("p",[t._v("在上面我们说了那么多的栈内存, 堆内存, 那么在"),a("code",[t._v("JS")]),t._v("中, 是怎样管理这些内存空间的呢?")]),t._v(" "),a("p",[t._v("首先, 同样的, 内存空间也是有属于自己的生命周期, 它主要分为三个阶段:")]),t._v(" "),a("ol",[a("li",[t._v("分配你所需的内存;")]),t._v(" "),a("li",[t._v("使用分配到的内存(读、写);")]),t._v(" "),a("li",[t._v("不需要的时候将其释放、归还.")])]),t._v(" "),a("p",[t._v("我们可以用个例子来看一下看.")]),t._v(" "),a("p",[a("strong",[t._v("案例一🌰")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在内存中给数值变量分配空间")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alart")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用内存")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用完后, 释放内存空间")]),t._v("\n")])])]),a("p",[t._v("上面三步分别对应着三个阶段. 当然, "),a("code",[t._v("a = null")]),t._v("这个操作是我们手动将"),a("code",[t._v("a")]),t._v("的内存空间释放. 若没有这个过程, "),a("code",[t._v("JS")]),t._v(" 的垃圾回收机制，也会帮助开发者自动做释放内存的工作。")]),t._v(" "),a("p",[a("strong",[t._v("垃圾收集器")]),t._v(" 会找出那些不再有引用的值，然后释放其占用的内存。会每隔固定的时间段就执行一次释放操作。")]),t._v(" "),a("p",[t._v("在自动垃圾收集机制中, 最常用的就是通过 "),a("strong",[t._v("标记清除")]),t._v(" 的算法来找到那些不再继续使用的对象。")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("a = null")]),t._v(" 就是做了一个释放引用的操作, 让 "),a("code",[t._v("a")]),t._v(" 原本对应的值失去引用, 脱离执行环境。"),a("strong",[t._v("这个值就会在当前执行上下文出栈后，下一次垃圾收集器执行操作时被找到，并被释放.")])]),t._v(" "),a("p",[t._v("但这也只是变量处于局部执行上下文才容易释放，对于全局执行上下文，因为在整个应用的生命周期中从一打开就处于整个执行栈的最底层，所以难以释放。")]),t._v(" "),a("p",[t._v("除了变量全局污染，对于垃圾回收的不利，也是少用全局变量的重要原因。")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("栈内存(stack)：栈内存是当前函数作用域的内存，与当前执行上下文绑定。")]),t._v(" "),a("p",[t._v("堆内存(heap)：堆内存是区别于栈区、代码区，是独立的另一个内存区域。无法直接赋值给变量，JavaScript 变量的赋值操作，只能引用其内存地址。")]),t._v(" "),a("p",[t._v("队列(queue)：事件队列是一种并发模型，当存在多个异步事件，需要队列来调度事件任务的入栈顺序。")]),t._v(" "),a("p",[t._v("垃圾回收：栈内存在出栈时，会直接释放。堆内存依赖垃圾收集器每隔一段时间收集标记，判断是否可以释放，只要有变量引用，就不会被回收。对于复杂场景，开发时需注意释放变量。")]),t._v(" "),a("p",[t._v("参考文章:")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://muyiy.cn/blog/1/1.3.html#%E6%A0%88%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84",target:"_blank",rel:"noopener noreferrer"}},[t._v("木易杨前端进阶-JavaScript深入之内存空间详细图解"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.jianshu.com/p/996671d4dcc4",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端基础进阶（一）：内存空间详细图解"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.im/post/5d870e6651882517a0319aa8",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端九五六-Javascript 内存空间管理"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.zhihu.com/question/57658008",target:"_blank",rel:"noopener noreferrer"}},[t._v("关于js中 “栈空间的先进后出，后进先出” 的疑问？"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/LinDaiDai/niubility-coding-js",target:"_blank",rel:"noopener noreferrer"}},[t._v("霖呆呆的blog"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=r.exports}}]);