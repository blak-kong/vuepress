(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{206:function(_,v,t){"use strict";t.r(v);var e=t(6),r=Object(e.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[_._v("#")]),_._v(" 前言")]),_._v(" "),t("p",[_._v("我们已经了解变量的赋值，以及引用类型和堆内存之间的关系。")]),_._v(" "),t("p",[_._v("前面的章节也多次提到垃圾回收，这里终于可以展开来讲。")]),_._v(" "),t("h2",{attrs:{id:"内存回收"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存回收"}},[_._v("#")]),_._v(" 内存回收")]),_._v(" "),t("p",[t("code",[_._v("JS")]),_._v("中有一个自动垃圾收集机制的, 垃圾收集器会每隔一段时间就执行一次释放操作, 去清理掉那些不再使用的值, 来释放它们占用的内存.")]),_._v(" "),t("h2",{attrs:{id:"销毁局部变量和全局变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#销毁局部变量和全局变量"}},[_._v("#")]),_._v(" 销毁局部变量和全局变量")]),_._v(" "),t("p",[t("strong",[_._v("1. 局部变量的销毁")])]),_._v(" "),t("p",[_._v("对于一般的局部变量, 即便它们是存在于函数中, 当这个函数执行完了之后, 它里面的变量还是会被"),t("code",[_._v("GC")]),_._v("。")]),_._v(" "),t("p",[_._v("唯一的特例是闭包。")]),_._v(" "),t("p",[_._v("闭包中的变量并不会随着函数的执行完毕而被清除掉，反而会一直保留着，除非这个闭包被清除（确保闭包中涉及的变量再也没有被别的函数引用到）.")]),_._v(" "),t("p",[_._v("这也是对于一些第三方插件，在软件的一些生命周期中，需要手动设置null销毁的原因。")]),_._v(" "),t("p",[_._v("插件的编写由于开放封闭原则，会大量使用闭包。")]),_._v(" "),t("p",[t("strong",[_._v("2. 全局变量的销毁")])]),_._v(" "),t("p",[_._v("一般不用自己销毁，垃圾回收会自动处理。")]),_._v(" "),t("p",[_._v("除非引用了闭包。")]),_._v(" "),t("hr"),_._v(" "),t("h2",{attrs:{id:"v8引擎的内存限制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#v8引擎的内存限制"}},[_._v("#")]),_._v(" V8引擎的内存限制")]),_._v(" "),t("p",[_._v("JavaScript 引擎, 在使用的时候对系统内存的占用有大小限制.")]),_._v(" "),t("p",[_._v("对于我们熟悉的"),t("code",[_._v("V8")]),_._v("引擎来说(谷歌浏览器内核), 它只能使用系统的一部分内存.")]),_._v(" "),t("ul",[t("li",[_._v("64位系统下能使用约"),t("code",[_._v("1.4GB")]),_._v(";")]),_._v(" "),t("li",[_._v("32位系统下能使用约"),t("code",[_._v("0.7GB")]),_._v(".")])]),_._v(" "),t("p",[_._v("这在浏览器端大部分情况下都够用, 但在特定场景，以及到了 node 就成了性能瓶颈。")]),_._v(" "),t("p",[_._v("例如想要一个 "),t("code",[_._v("2G")]),_._v(" 的文件, 那么它就无法将其全部读入内存且进行其他的操作.")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/24/16f37e93633e757d?w=440&h=329&f=png&s=54586",alt:""}})]),_._v(" "),t("p",[t("code",[_._v("JS")]),_._v("中的存储, 分为栈存储和堆存储.")]),_._v(" "),t("ol",[t("li",[_._v("对于栈内存, 当"),t("code",[_._v("ESP")]),_._v("指针(栈指针)下移，也就是上下文切换之后，栈顶的空间会自动被回收.")]),_._v(" "),t("li",[_._v("而对象的存储是通过堆来进行分配的, 当在构建一个对象且进行赋值操作的时候, "),t("code",[_._v("JS")]),_._v("会将相应的内存分配到堆上. 所以每创建一个对象之后, 堆就会大一点.")])]),_._v(" "),t("p",[_._v("前面说了, "),t("code",[_._v("V8")]),_._v("引擎只能使用系统的一部分内存, 你的堆却可能会不停的增大, 直到大小达到了"),t("code",[_._v("V8")]),_._v("引擎的内存上限为止.")]),_._v(" "),t("p",[_._v("这就导致我们对于 "),t("code",[_._v("V8引擎")]),_._v(" 的使用，存在内存限制。")]),_._v(" "),t("p",[t("strong",[t("code",[_._v("V8")]),_._v(" 引擎为什么会设置一个内存的上限?")])]),_._v(" "),t("ul",[t("li",[t("code",[_._v("JS")]),_._v("的单线程执行机制")]),_._v(" "),t("li",[t("code",[_._v("JS")]),_._v("垃圾回收机制的限制")])]),_._v(" "),t("p",[_._v("在"),t("code",[_._v("JS")]),_._v("中, 由于它是单线程运行的, 一次只能做一件事,。那就意味着一旦进入了垃圾回收阶段, 其它的运行逻辑都得暂停了, 得等它过了这个阶段才继续执行.")]),_._v(" "),t("p",[_._v("但垃圾回收是一件非常耗时的事情, 以 "),t("code",[_._v("1.5GB")]),_._v(" 的垃圾回收堆内存为例，"),t("code",[_._v("V8")]),_._v(" 做一次小的垃圾回收需要50ms 以上，做一次非增量式的垃圾回收甚至要 1s 以上.")]),_._v(" "),t("p",[_._v("所以若是垃圾回收时常过久的话, "),t("code",[_._v("JS")]),_._v("代码会一直没有响应, 造成应用卡顿.")]),_._v(" "),t("p",[_._v("于是"),t("code",[_._v("V8")]),_._v("干脆给它限制了堆内存大小, 这样就算你到顶了也不会说太卡, 而且其实大部分情况也不会说有操作几个"),t("code",[_._v("G")]),_._v("的情况, 因此这也是"),t("code",[_._v("V8")]),_._v("的一种权衡.")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/24/16f385a685e1c072?w=300&h=300&f=png&s=271546",alt:""}})]),_._v(" "),t("p",[t("strong",[_._v("V8的内存限制是不可修改的吗🤔️?")])]),_._v(" "),t("p",[_._v("并不是的, 你可以通过执行以下命令来修改它:")]),_._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[_._v("// 这是调整老生代这部分的内存，单位是MB。后面会详细介绍新生代和老生代内存\nnode --max-old-space-size=2048 xxx.js \n\n// 这是调整新生代这部分的内存，单位是 KB。\nnode --max-new-space-size=2048 xxx.js\n")])])]),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/qq_35624642/article/details/81084331",target:"_blank",rel:"noopener noreferrer"}},[_._v("《nodejs 前端项目编译时内存溢出问题的原因及解决方案》"),t("OutboundLink")],1)]),_._v(" "),t("hr"),_._v(" "),t("h2",{attrs:{id:"堆内存的分代管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#堆内存的分代管理"}},[_._v("#")]),_._v(" 堆内存的分代管理")]),_._v(" "),t("p",[t("code",[_._v("V8")]),_._v("引擎对堆内存中的"),t("code",[_._v("JS")]),_._v("对象进行了分代管理, 也就是分为 "),t("strong",[_._v("新生代")]),_._v(" 和 "),t("strong",[_._v("老生代")]),_._v(".")]),_._v(" "),t("p",[_._v("首先让我们来了解以下几个知识点:")]),_._v(" "),t("ul",[t("li",[t("strong",[_._v("新生代")]),_._v(" 就是临时分配的内存，存活时间短, 如临时变量、字符串等;")]),_._v(" "),t("li",[t("strong",[_._v("老生代")]),_._v(" 是常驻内存，存活的时间长, 如主控制器、服务器对象等;")]),_._v(" "),t("li",[t("code",[_._v("V8")]),_._v("的堆内存, 就是两个内存之和.")])]),_._v(" "),t("p",[_._v("就像下面的这张图一样:")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/24/16f389be88d7e8ea?w=922&h=304&f=png&s=20252",alt:""}})]),_._v(" "),t("h3",{attrs:{id:"新生代内存的回收"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新生代内存的回收"}},[_._v("#")]),_._v(" 新生代内存的回收")]),_._v(" "),t("p",[_._v("其实也像图里画的一样, 新生代的默认内存限制很小:")]),_._v(" "),t("ul",[t("li",[_._v("64位系统下为"),t("code",[_._v("32MB")]),_._v(";")]),_._v(" "),t("li",[_._v("32位系统下为"),t("code",[_._v("16MB")]),_._v(".")])]),_._v(" "),t("p",[_._v("确实是够小的啦, 主要原因是新生代中的变量存活时间短，来了马上就走，不容易产生太大的内存负担，因此可以将它设的足够小.")]),_._v(" "),t("h4",{attrs:{id:"新生代内存结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#新生代内存结构"}},[_._v("#")]),_._v(" 新生代内存结构")]),_._v(" "),t("p",[_._v("新生代内存会被分为两个部分:")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/25/16f3af34d38c1826?w=412&h=304&f=png&s=54905",alt:"memory2.png"}})]),_._v(" "),t("p",[_._v("一块叫做"),t("code",[_._v("From")]),_._v(", 另一块叫做"),t("code",[_._v("To")]),_._v(". (别的教材中是这么命名的, 后来我去找寻原因, 发现大概是因为在"),t("a",{attrs:{href:"https://github.com/tsy77/blog/issues/13",target:"_blank",rel:"noopener noreferrer"}},[_._v("V8的源码-内存管理"),t("OutboundLink")],1),_._v("中有"),t("code",[_._v("from_space_")]),_._v("和"),t("code",[_._v("to_space_")]),_._v("这两个东西吧)")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("From")]),_._v("表示正在使用的内存;")]),_._v(" "),t("li",[t("code",[_._v("To")]),_._v("表示目前闲置的内存.")])]),_._v(" "),t("h4",{attrs:{id:"scavenge算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scavenge算法"}},[_._v("#")]),_._v(" Scavenge算法")]),_._v(" "),t("p",[_._v("上面已经介绍了"),t("strong",[_._v("新生代内存的结构")]),_._v(", 下面来说说它具体是如何进行垃圾回收的.")]),_._v(" "),t("p",[_._v("当进行垃圾回收的时候, 会经过以下几个步骤:")]),_._v(" "),t("ol",[t("li",[t("code",[_._v("V8")]),_._v("将"),t("code",[_._v("From")]),_._v("部分的对象全部检查一遍;")]),_._v(" "),t("li",[_._v("检查出若是 "),t("strong",[_._v("存活对象")]),_._v(" 则复制到"),t("code",[_._v("To")]),_._v("内存中, 若不是则直接回收;")]),_._v(" "),t("li",[_._v("复制到"),t("code",[_._v("To")]),_._v("内存中是按照顺序从头放置的;")]),_._v(" "),t("li",[_._v("当"),t("code",[_._v("From")]),_._v("中所有的存活对象全部复制完毕之后, "),t("code",[_._v("From")]),_._v("和"),t("code",[_._v("To")]),_._v("就会 "),t("strong",[_._v("对调")]),_._v(" , 也就是"),t("code",[_._v("From")]),_._v("被闲置, "),t("code",[_._v("To")]),_._v("在使用;")]),_._v(" "),t("li",[_._v("如此循环.")])]),_._v(" "),t("p",[t("em",[_._v("一张图方便你理解🤔:")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/25/16f3b13bb13bfee7?w=1130&h=770&f=png&s=206014",alt:"memory3.png"}})]),_._v(" "),t("p",[_._v("不就是个清理垃圾的动作吗? 为什么"),t("code",[_._v("V8")]),_._v("要整的这么复杂啊, 又是遍历又是复制的.")]),_._v(" "),t("p",[_._v("而且为什么还要在"),t("code",[_._v("To")]),_._v("内存中按照顺序从头放置呢🤔️?")]),_._v(" "),t("p",[_._v("其实, 它这样做是有一定好处的, 首先让我们来看看下面这张图:")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/25/16f3b233d4984b26?w=650&h=788&f=png&s=148434",alt:"memory4.png"}})]),_._v(" "),t("p",[_._v("在上图中, 黄色的部分是"),t("strong",[_._v("待分配的内存")]),_._v(", 而蓝色的小方块就是"),t("strong",[_._v("存活对象")]),_._v(".")]),_._v(" "),t("p",[_._v("看起来存活对象非常的散乱, 使得空间变得零零散散, 并且堆内存又是连续分配的, 若是碰到稍微大点的对象的话都没有办法进行空间分配了.")]),_._v(" "),t("blockquote",[t("p",[_._v("堆包含一个链表来维护已用和空闲的内存块。在堆上新分配（用 new 或者 malloc）内存是从空闲的内存块中找到一些满足要求的合适块。所以可能让人觉得只要有很多不连续的零散的小区域，只要总数达到申请的内存块，就可以分配。")])]),_._v(" "),t("blockquote",[t("p",[_._v("但事实上是不行的，这又让人觉得是不是零散的内存块不能连接成一个大的空间，而必须要一整块连续的内存空间才能申请成功.")])]),_._v(" "),t("p",[_._v("(原文链接：https://blog.csdn.net/jin13277480598/article/details/54409543)")]),_._v(" "),t("p",[_._v("而这种零散的空间也有一个名字, 叫做 "),t("strong",[_._v("内存碎片")]),_._v(".")]),_._v(" "),t("p",[_._v("因此将其按照顺序从头放置也是为了解决 "),t("strong",[_._v("内存碎片")]),_._v(" 的问题, 在一顿复制之后, "),t("code",[_._v("To")]),_._v("内存会被排列的整整齐齐的:")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/25/16f3b2bb51624bd0?w=660&h=796&f=png&s=124542",alt:"memory5.png"}})]),_._v(" "),t("p",[_._v("整顿之后就大大方便了后续连续空间的分配.")]),_._v(" "),t("p",[_._v("上面👆说的这种新生代垃圾回收算法也被叫做 "),t("strong",[t("code",[_._v("Scavenge")]),_._v("算法")]),_._v(" ("),t("code",[_._v("scavenge")]),_._v("的本意就是回收).")]),_._v(" "),t("p",[_._v("所以这个"),t("code",[_._v("Scavenge")]),_._v("算法不仅仅是将非存活对象给回收了, 还需要对内存空间做整顿.")]),_._v(" "),t("p",[_._v("就像是我们平常打扫房间, 不仅仅是将不要的垃圾清理掉, 还顺便把房间内的东西给放整齐了😊.")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/25/16f3b3648b5d9a27?w=300&h=210&f=png&s=57717",alt:""}})]),_._v(" "),t("h3",{attrs:{id:"老生代内存的回收"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#老生代内存的回收"}},[_._v("#")]),_._v(" 老生代内存的回收")]),_._v(" "),t("p",[_._v("如果"),t("strong",[_._v("新生代中的变量")]),_._v("经过多次回收之后依然存在的话, 它就会发生“"),t("strong",[_._v("晋升")]),_._v("”, 被放入"),t("strong",[_._v("老生代内存中")]),_._v(".")]),_._v(" "),t("p",[_._v("产生晋升的情况:")]),_._v(" "),t("ul",[t("li",[_._v("已经经历过一次"),t("code",[_._v("Scavenge")]),_._v("回收;")]),_._v(" "),t("li",[t("code",[_._v("To(闲置内存)")]),_._v("空间的内存不足"),t("code",[_._v("75%")]),_._v(".")])]),_._v(" "),t("p",[_._v("通过上面👆的介绍我们已经知道, 老生代内存的空间会比新生代的大了很多, 而且老生代累计的变量空间一般都是很大的.")]),_._v(" "),t("p",[_._v("因此老生代的垃圾回收就不能用"),t("code",[_._v("Scavenge")]),_._v("算法了, 一是会浪费一半的空间, 二对庞大的内存空间进行复制本身就是个“很重的体力活”.")]),_._v(" "),t("h4",{attrs:{id:"标记清除"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标记清除"}},[_._v("#")]),_._v(" 标记清除")]),_._v(" "),t("p",[_._v("所以对于老生代的垃圾回收干脆粗暴点吧, 采用"),t("strong",[_._v("标记清除")]),_._v("的方式进行回收.")]),_._v(" "),t("p",[t("strong",[_._v("标记清除")]),_._v("主要是经过以下几个过程:")]),_._v(" "),t("ol",[t("li",[_._v("遍历堆中的所有对象, 给它们做上标记;")]),_._v(" "),t("li",[_._v("之后对于代码环境中"),t("code",[_._v("使用的变量")]),_._v("和"),t("code",[_._v("被强引用")]),_._v("的变量"),t("code",[_._v("取消标记")]),_._v("(被标记的都是垃圾);")]),_._v(" "),t("li",[_._v("把"),t("code",[_._v("依然被标记的变量")]),_._v("当成垃圾给清除掉, 进行空间的回收;")])]),_._v(" "),t("p",[_._v("当然, 和新生代一样, 在清理了之后, 还要整理内存碎片, 当然它的整理办法就是在清理阶段结束后把存活对象全部往一端靠拢.")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/28/16f4849a0850b736?w=906&h=618&f=png&s=151795",alt:"memory6.png"}})]),_._v(" "),t("p",[_._v("所以总的来说, 对于老生代内存的回收主要就是经过:")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("标记清除阶段")]),_._v(", 留下存活对象;")]),_._v(" "),t("li",[t("code",[_._v("整理阶段")]),_._v(", 把存活对象往一边靠拢.")])]),_._v(" "),t("p",[_._v("因此, 对于现在的主流浏览器来说, 只要切断对象与根部的关系, 就可以将对象进行回收.")]),_._v(" "),t("h3",{attrs:{id:"并发标记"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并发标记"}},[_._v("#")]),_._v(" 并发标记")]),_._v(" "),t("p",[_._v("在上面我们已经介绍过了"),t("code",[_._v("V8")]),_._v("在进行垃圾回收的时候, 不可避免地会阻塞业务逻辑的执行, 特别如果是老生代垃圾回收的任务比较繁重的时候, 会很耗时严重影响应用的性能.")]),_._v(" "),t("p",[_._v("为优化解决此问题, "),t("code",[_._v("V8")]),_._v("官方在"),t("code",[_._v("2018")]),_._v("年推出了名为"),t("strong",[_._v("增量标记")]),_._v("的技术.")]),_._v(" "),t("p",[_._v("总的来说该技术的作用就是"),t("code",[_._v("将原本一口气完成的标记任务分为了很多小的部分去完成, 每完成一个小任务就停一会, 让js逻辑执行一会, 然后再继续执行下面的部分")]),_._v(".")]),_._v(" "),t("blockquote",[t("p",[_._v("在 GC 扫描和标记活动对象时，它允许 JavaScript 应用程序继续运行")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/12/28/16f4a6e6d5e4a637?w=866&h=696&f=png&s=100098",alt:"memory7.png"}})]),_._v(" "),t("p",[_._v("其实它内部并没有上面👆说的这么简单, 还是有很多实现机制的, 具体的可以看这里:")]),_._v(" "),t("p",[t("a",{attrs:{href:"https://juejin.im/entry/5b1fa706e51d4506a14dd041",target:"_blank",rel:"noopener noreferrer"}},[_._v("《引擎V8推出“并发标记”，可节省60%-70%的GC时间》"),t("OutboundLink")],1)]),_._v(" "),t("p",[_._v("在通过增量标记后, 垃圾回收过程对JS应用的阻塞时间减少到原来了1 / 6, 可以说这优化相当大了啊.")]),_._v(" "),t("h2",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[_._v("#")]),_._v(" 总结")]),_._v(" "),t("p",[t("strong",[_._v("V8 内存限制：为了垃圾回收不影响性能，V8 引擎存在内存限制，在 64 位系统下为 "),t("code",[_._v("32MB")]),_._v("; 32 位系统下为 "),t("code",[_._v("16MB")]),_._v("。")])]),_._v(" "),t("p",[t("strong",[_._v("V8 分代管理：V8 的内存空间，存在新生代与老生代。新生代时临时内存，空间小。老生代是常驻内存，空间大。新生代内存经过多次内存分配回收，若仍旧存在，会晋升到老生代。")])]),_._v(" "),t("p",[t("strong",[_._v("V8 垃圾回收：")])]),_._v(" "),t("p",[_._v("①标记清除：给所有变量/对象打上标记，有引用就先清除，有标记就是垃圾。")]),_._v(" "),t("p",[_._v("②并发清除：将标记任务分成多段小任务, 每完成一个小任务就停一会, 让js逻辑执行一会, 然后再继续执行下面的部分。")]),_._v(" "),t("p",[_._v("参考文章:")]),_._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://juejin.im/post/5dcb7f706fb9a04aad01615a",target:"_blank",rel:"noopener noreferrer"}},[_._v("《神三元-V8 引擎垃圾内存回收原理解析》"),t("OutboundLink")],1)]),_._v(" "),t("li",[t("a",{attrs:{href:"https://muyiy.cn/blog/1/1.4.html#%E5%86%85%E5%AD%98%E5%9B%9E%E6%94%B6",target:"_blank",rel:"noopener noreferrer"}},[_._v("《木易杨-JavaScript深入之带你走进内存机制》"),t("OutboundLink")],1)]),_._v(" "),t("li",[t("a",{attrs:{href:"https://blog.csdn.net/qq_35624642/article/details/81084331",target:"_blank",rel:"noopener noreferrer"}},[_._v("《nodejs 前端项目编译时内存溢出问题的原因及解决方案》"),t("OutboundLink")],1)]),_._v(" "),t("li",[t("a",{attrs:{href:"https://juejin.im/entry/5b1fa706e51d4506a14dd041",target:"_blank",rel:"noopener noreferrer"}},[_._v("《引擎V8推出“并发标记”，可节省60%-70%的GC时间》"),t("OutboundLink")],1)]),_._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/LinDaiDai/niubility-coding-js",target:"_blank",rel:"noopener noreferrer"}},[_._v("霖呆呆的blog"),t("OutboundLink")],1)]),_._v(" "),t("li",[_._v("https://segmentfault.com/q/1010000004170439")])]),_._v(" "),t("h2",{attrs:{id:"扩展阅读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扩展阅读"}},[_._v("#")]),_._v(" 扩展阅读")]),_._v(" "),t("p",[_._v("本文严格来看仍旧不够严谨，部分地方含糊不清，也比较片面（只强化了“栈堆与闭包”这个相关知识点的理解）。")]),_._v(" "),t("p",[_._v("在文章更新之前，对于垃圾回收若有更深的理解，仍旧需要参考其他文章。")]),_._v(" "),t("p",[_._v("推荐以下链接")]),_._v(" "),t("p",[t("a",{attrs:{href:"https://blog.csdn.net/weixin_43378716/article/details/107523637",target:"_blank",rel:"noopener noreferrer"}},[_._v("理解v8的垃圾清理_weixin_43378716的博客-CSDN博客"),t("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=r.exports}}]);