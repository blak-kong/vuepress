(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{218:function(t,a,s){"use strict";s.r(a);var v=s(6),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"前言：javascript没有块级作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言：javascript没有块级作用域"}},[t._v("#")]),t._v(" 前言：JavaScript没有块级作用域")]),t._v(" "),s("p",[t._v("开始之前，必须先声明，JavaScript 没有块级作用域，只有执行上下文。这也是这篇文章的输出原因之一，讲清楚作用域和执行上下文的关系。")]),t._v(" "),s("p",[t._v("请不要简单的把一个 "),s("code",[t._v("{}")]),t._v(" 当成一个块级作用域，这是错误的！")]),t._v(" "),s("p",[t._v("多数人的入门语言是 "),s("code",[t._v("C语言")]),t._v("， 它可以在 "),s("code",[t._v("for循环")]),t._v(" 里定义变量不影响外部环境。 但在 JavaScript 中却不可以。")]),t._v(" "),s("p",[s("strong",[t._v("JavaScript 中只有全局作用域和函数作用域。而执行上下文，就是函数作用域中的 JavaScript 代码的运行过程。")])]),t._v(" "),s("p",[t._v("JavaScript 代码的执行过程分为两个阶段：")]),t._v(" "),s("ul",[s("li",[t._v("编译阶段：由编译器完成，将代码翻译成可执行代码")]),t._v(" "),s("li",[t._v("执行阶段：由引擎完成，主要任务是执行可执行代码")])]),t._v(" "),s("p",[t._v("其中可执行代码主要有三种类型：全局对象，局部对象，Eval对象。（函数即对象）")]),t._v(" "),s("p",[s("strong",[t._v("Eval 函数对象存在安全性问题，不建议使用")])]),t._v(" "),s("h2",{attrs:{id:"一、对象和执行上下文的关系？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、对象和执行上下文的关系？"}},[t._v("#")]),t._v(" 一、对象和执行上下文的关系？")]),t._v(" "),s("blockquote",[s("p",[t._v("执行上下文是 "),s("code",[t._v("javascript")]),t._v(" 代码被解析和执行时，所在环境的抽象概念。")])]),t._v(" "),s("p",[t._v("执行上下文，是对象和运行环境绑定看待时，才出现的概念。并不独立存在。")]),t._v(" "),s("h2",{attrs:{id:"二、javascript-中-执行上下文-的类型？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、javascript-中-执行上下文-的类型？"}},[t._v("#")]),t._v(" 二、javascript 中“执行上下文”的类型？")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("全局执行上下文")]),t._v("：只有一个，也就是浏览器对象(即"),s("code",[t._v("window")]),t._v("对象)，"),s("code",[t._v("this")]),t._v("指向的就是这个全局对象。")]),t._v(" "),s("li",[s("strong",[t._v("函数执行上下文")]),t._v("：有无数个，只有在函数"),s("strong",[t._v("被调用")]),t._v("时才会被"),s("strong",[t._v("创建")]),t._v("，每次调用函数都会创建一个新的执行上下文。")]),t._v(" "),s("li",[s("strong",[t._v("Eval函数执行上下文")]),t._v("："),s("code",[t._v("js")]),t._v("的"),s("code",[t._v("eval")]),t._v("函数执行其内部的代码会创建属于自己的执行上下文, 很少用而且不建议使用。")])]),t._v(" "),s("h2",{attrs:{id:"三、执行上下文的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、执行上下文的特点"}},[t._v("#")]),t._v(" 三、执行上下文的特点")]),t._v(" "),s("ol",[s("li",[t._v("单线程，只在主线程上运行；")]),t._v(" "),s("li",[t._v("同步执行，从上向下按顺序执行；")]),t._v(" "),s("li",[t._v("全局上下文只有一个，也就是"),s("code",[t._v("window")]),t._v("对象；")]),t._v(" "),s("li",[t._v("函数执行上下文没有限制；")]),t._v(" "),s("li",[t._v("函数每调用一次就会产生一个新的执行上下文环境。")])]),t._v(" "),s("h2",{attrs:{id:"五、执行上下文的生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、执行上下文的生命周期"}},[t._v("#")]),t._v(" 五、执行上下文的生命周期")]),t._v(" "),s("ol",[s("li",[t._v("创建阶段")]),t._v(" "),s("li",[t._v("执行阶段")]),t._v(" "),s("li",[t._v("销毁阶段")])]),t._v(" "),s("h3",{attrs:{id:"创建阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建阶段"}},[t._v("#")]),t._v(" 创建阶段")]),t._v(" "),s("ol",[s("li",[t._v("创建变量对象")]),t._v(" "),s("li",[t._v("建立作用域链")]),t._v(" "),s("li",[t._v("确定this的指向")])]),t._v(" "),s("h3",{attrs:{id:"执行阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#执行阶段"}},[t._v("#")]),t._v(" 执行阶段")]),t._v(" "),s("ol",[s("li",[t._v("完成变量赋值")]),t._v(" "),s("li",[t._v("函数引用")]),t._v(" "),s("li",[t._v("执行其他代码")])]),t._v(" "),s("h3",{attrs:{id:"销毁阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#销毁阶段"}},[t._v("#")]),t._v(" 销毁阶段")]),t._v(" "),s("p",[t._v("执行完毕，推出执行栈，等待 V8 垃圾回收（释放内存）。")]),t._v(" "),s("p",[s("strong",[t._v("图片总结")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://upload-images.jianshu.io/upload_images/2982021-66b05f05719d46e8.png",alt:"执行上下文的生命周期"}})]),t._v(" "),s("h2",{attrs:{id:"六、变量环境与词法环境（含题）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#六、变量环境与词法环境（含题）"}},[t._v("#")]),t._v(" 六、变量环境与词法环境（含题）")]),t._v(" "),s("p",[t._v("变量环境与词法环境同属于执行上下文的知识点，但由于个人理解不够透彻，这里只做简要介绍！")]),t._v(" "),s("p",[t._v("根据ECMA-262规范，我们可以暂且简单进行归纳为")]),t._v(" "),s("p",[t._v("词法环境："),s("code",[t._v("let")]),t._v(" 和 "),s("code",[t._v("const")]),t._v("，它们创建的对象与当前词法环境上下文绑定，不会进行变量提升。")]),t._v(" "),s("p",[t._v("变量环境："),s("code",[t._v("var")]),t._v(" 创建的对象，会进行变量提升。同时，函数提升的优先级高于变量提升。")]),t._v(" "),s("p",[s("em",[t._v("一张图方便你理解")]),t._v(" 🤔")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://hexo-blog-1256114407.cos.ap-shenzhen-fsi.myqcloud.com/executionContext1.jpg",alt:"executionContext1"}})]),t._v(" "),s("h3",{attrs:{id:"this-绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#this-绑定"}},[t._v("#")]),t._v(" This 绑定")]),t._v(" "),s("p",[t._v("通过上面的介绍我们知道实际开发主要用到两种执行上下文为"),s("strong",[t._v("全局")]),t._v("和"),s("strong",[t._v("函数")]),t._v(", 那么绑定"),s("code",[t._v("this")]),t._v("在这两种上下文中也不同.")]),t._v(" "),s("ul",[s("li",[t._v("全局执行上下文中, "),s("code",[t._v("this")]),t._v("指的就是全局对象, 浏览器环境指向"),s("code",[t._v("window")]),t._v("对象, "),s("code",[t._v("nodejs")]),t._v(" 中因为 commonjs 模块化规范，指向当前文件的"),s("code",[t._v("module")]),t._v("对象.")]),t._v(" "),s("li",[t._v("函数执行上下文较为复杂, "),s("code",[t._v("this")]),t._v("的值取决于函数的调用方式. 具体有: 默认绑定、隐式绑定、显式绑定、"),s("code",[t._v("new")]),t._v("绑定、箭头函数.")])]),t._v(" "),s("h3",{attrs:{id:"词法环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#词法环境"}},[t._v("#")]),t._v(" 词法环境")]),t._v(" "),s("p",[t._v("结合上图，现在我们已经知道, "),s("strong",[t._v("词法环境")]),t._v("是由两个部分"),s("strong",[t._v("组成")]),t._v("的:")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("环境记录")]),t._v(": 存储变量和函数声明的实际位置;")]),t._v(" "),s("li",[s("strong",[t._v("对外部环境的引用")]),t._v(": 用于访问其外部词法环境.")])]),t._v(" "),s("p",[t._v("同样的, "),s("strong",[t._v("词法环境")]),t._v(" 也主要有两种类型:")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("全局环境")]),t._v(": 拥有一个全局对象(window对象)及其关联的所有属性和方法(比如数组的方法"),s("code",[t._v("splice、concat")]),t._v("等), 同时也包含了用户自定义的全局变量. 但是"),s("strong",[t._v("全局环境")]),t._v("中没有外部环境的引用, 也就是外部环境引用为"),s("code",[t._v("null")]),t._v(".")]),t._v(" "),s("li",[s("strong",[t._v("函数环境")]),t._v(": 用户在函数中自定义的变量和函数存储在"),s("strong",[t._v("环境记录")]),t._v("中, 包含了"),s("code",[t._v("arguments")]),t._v("对象. 而对外部环境的引用可以是"),s("strong",[t._v("全局环境")]),t._v("， 也可以是另一个"),s("strong",[t._v("函数环境")]),t._v("(比如一个函数中包含了另一个函数).")])]),t._v(" "),s("h4",{attrs:{id:"来一段词法绑定代码🍊"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#来一段词法绑定代码🍊"}},[t._v("#")]),t._v(" 来一段词法绑定代码🍊")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下面两行注释掉，因为报错就不会继续运行，这里只是说明没有声明就不会变量提升，也不会绑定词法环境")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// console.log(b) // Uncaught ReferenceError: b is not defined")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b = 1")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Cannot access 'c' before initialization 绑定了词法位置，不能再 let 之前调用")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])])]),s("h3",{attrs:{id:"变量环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量环境"}},[t._v("#")]),t._v(" 变量环境")]),t._v(" "),s("p",[s("strong",[t._v("变量环境")]),t._v(" 继承了词法环境, 因此它具有上面定义的词法环境的所有属性.")]),t._v(" "),s("p",[t._v("而在实际工作中使用的 ES6 代码里，我们可以理解为，"),s("strong",[t._v("词法")]),t._v(" 环境和 "),s("strong",[t._v("变量")]),t._v(" 环境的区别在于 "),s("strong",[t._v("词法（"),s("code",[t._v("let")]),t._v(" 和 "),s("code",[t._v("const")]),t._v("）与环境绑定")]),t._v("， "),s("strong",[t._v("变量（ "),s("code",[t._v("var")]),t._v(" ）不绑定环境")]),t._v(" 。")]),t._v(" "),s("p",[s("strong",[t._v("接下来，我们看看关于 JavaScript 入门级别的面试题，函数提升和变量提升。（为什么是入门级？因为这是 JavaScript 运行机制的第一个前置知识点）")])]),t._v(" "),s("h4",{attrs:{id:"变量声明提升🍓"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变量声明提升🍓"}},[t._v("#")]),t._v(" 变量声明提升🍓")]),t._v(" "),s("p",[t._v("日常使用:")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("实际执行过程:")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("因此有了下面这段代码的执行结果:")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明,先给一个默认值undefined;")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 赋值,对变量a赋值了10")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10")]),t._v("\n")])])]),s("p",[t._v("上面的代码👆在第一行中并不会报错"),s("code",[t._v("Uncaught ReferenceError: a is not defined")]),t._v(", 是因为"),s("strong",[t._v("声明提升")]),t._v(", js引擎读取整个执行上下文后，先给了 "),s("code",[t._v("a")]),t._v(" 一个默认值 undefined.")]),t._v(" "),s("p",[t._v("这就是最简单的"),s("strong",[t._v("变量声明提升")]),t._v(".")]),t._v(" "),s("h4",{attrs:{id:"函数声明提升🍉"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数声明提升🍉"}},[t._v("#")]),t._v(" 函数声明提升🍉")]),t._v(" "),s("p",[t._v("定义函数有两种方法:")]),t._v(" "),s("ul",[s("li",[t._v("构造函数: "),s("code",[t._v("function foo () {}")]),t._v(";")]),t._v(" "),s("li",[t._v("函数表达式: "),s("code",[t._v("var foo = function () {}")]),t._v(".")])]),t._v(" "),s("p",[s("strong",[t._v("函数表达式")]),t._v("的声明方式更像是给一个变量"),s("code",[t._v("foo")]),t._v("赋值一个匿名函数.")]),t._v(" "),s("p",[t._v("而两者的区别，暂时不用深究，超纲了。")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// function f1(){}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("f1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数声明")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("f2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数表达式")]),t._v("\n")])])]),s("h4",{attrs:{id:"声明优先级-函数大于变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#声明优先级-函数大于变量"}},[t._v("#")]),t._v(" 声明优先级: 函数大于变量")]),t._v(" "),s("p",[t._v("这里不写代码，也请忘掉网上的一些不知道多少手的知识。")]),t._v(" "),s("p",[t._v("根据函数声明提升的示例代码，我们问自己一个问题：假如存在一个变量和函数同名，会发生什么？")]),t._v(" "),s("p",[t._v("已知变量声明提升后，变量会预设为undefined。函数声明提升后，还是函数本身。")]),t._v(" "),s("p",[t._v("为什么变量会预设？为什么它们不能同名？")]),t._v(" "),s("p",[t._v("这里不写答案，有经验的同学会想到堆内存。基础稍差的萌新们，可能不知道堆内存是什么，但带着问题，可以在下一章通过更深入了解 JavaScript 的底层知识，得到解答。")]),t._v(" "),s("p",[t._v("总之，在了解JavaScript引擎会预先解析代码的前提下，我们通过思考执行过程，可以发现"),s("strong",[t._v("声明提升")]),t._v("的实际过程如下:")]),t._v(" "),s("blockquote",[s("p",[t._v("在函数作用域的创建阶段，整个上下文会被读取，然后对于声明，"),s("code",[t._v("function")]),t._v(" 和 "),s("code",[t._v("var")]),t._v(" 会自动提升到执行上下文的顶部。"),s("br"),t._v("\n而对于词法环境绑定的声明，会保持未初始化（在"),s("code",[t._v("let")]),t._v(" 和 "),s("code",[t._v("const")]),t._v(" ）。"),s("br"),t._v("\n所以这就是为什么可以在声明之前访问 "),s("code",[t._v("var")]),t._v(" 定义的变量（尽管是 "),s("code",[t._v("undefined")]),t._v(" ），但如果在声明之前访问 "),s("code",[t._v("let")]),t._v(" 和 "),s("code",[t._v("const")]),t._v(" 定义的变量就会提示引用错误的原因。这就是所谓的变量提升。")])]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[s("strong",[t._v("JavaScript没有块级作用域（再次强调）")])]),t._v(" "),s("p",[t._v("词法环境："),s("code",[t._v("let")]),t._v(" 和 "),s("code",[t._v("const")]),t._v("，它们创建的对象与当前词法环境上下文绑定，不会进行变量提升。")]),t._v(" "),s("p",[t._v("变量环境："),s("code",[t._v("var")]),t._v(" 创建的对象和 "),s("code",[t._v("function")]),t._v(" 创建的函数，会进行变量/函数提升。")]),t._v(" "),s("p",[t._v("参考文章:")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/LinDaiDai/niubility-coding-js",target:"_blank",rel:"noopener noreferrer"}},[t._v("霖呆呆的blog"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=_.exports}}]);