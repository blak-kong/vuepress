(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{205:function(e,t,a){"use strict";a.r(t);var n=a(6),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"dom基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom基础"}},[e._v("#")]),e._v(" DOM基础")]),e._v(" "),a("h2",{attrs:{id:"第一章-dom概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一章-dom概述"}},[e._v("#")]),e._v(" 第一章:DOM概述")]),e._v(" "),a("h3",{attrs:{id:"_1-1dom以及节点概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1dom以及节点概念"}},[e._v("#")]),e._v(" 1.1DOM以及节点概念")]),e._v(" "),a("p",[e._v("​")]),e._v(" "),a("p",[e._v("文档对象模型DOM（Document Object Model）定义访问和处理HTML文档的标准方法。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("DOM 将HTML文档呈现为带有元素、属性和文本的树结构（节点树）。\n\n![img1](https://github.com/LinDaiDai/JavaScript/blob/master/DomImg/img1.png?raw=trueE:\\JavaScript\\DomImg\\img1.png)\n\n**HTML**文档可以说由节点构成的集合，DOM节点有:\n")])])]),a("ol",[a("li",[a("p",[e._v("元素节点："),a("strong",[e._v("上图中"),a("html",[e._v("、"),a("body",[e._v("、"),a("p",[e._v("等都是元素节点，即标签。")])])])])])]),e._v(" "),a("li",[a("p",[e._v("文本节点:"),a("strong",[e._v("向用户展示的内容，如"),a("li",[e._v("...")]),e._v("中的JavaScript、DOM、CSS等文本,即标签内部的纯文本.")])])]),e._v(" "),a("li",[a("p",[e._v("属性节点:元素属性，如"),a("a",[e._v('标签的链接属性href="http://www.imooc.com",即标签的属性.')])])])]),e._v(" "),a("p",[e._v("document节点是每个文档的根节点")]),e._v(" "),a("p",[e._v("document节点下面只有一个 html节点，我们称之为"),a("strong",[e._v("文档元素")]),e._v("。")]),e._v(" "),a("p",[e._v("(documentElement)文档元素是文档的最外层元素，其他元素都包含在文档元素中。")]),e._v(" "),a("p",[e._v("一个文档只能有一个文档元素，在html中文档元素永远是 "),a("code",[e._v("<html>")]),e._v("元素。")]),e._v(" "),a("p",[e._v("在DOM树中，html文档中每一处标记都可以用树中的一个节点来表示。")]),e._v(" "),a("p",[e._v("html(元素)标签，通过元素节点表示属性，通过属性节点来表示文档类型，通过文档类型节点来表示注释，通过注释类型来表示")]),e._v(" "),a("h3",{attrs:{id:"_1-2节点的属性-特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2节点的属性-特性"}},[e._v("#")]),e._v(" 1.2节点的属性(特性)")]),e._v(" "),a("p",[e._v("每一个节点都有三个特点:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("1.nodeName      节点名称(只读)    \n\n2.nodeValue     节点值(设置或返回节点的值)     \n\n3.nodeType      节点类型\n")])])]),a("p",[e._v("1."),a("strong",[e._v("nodeName")]),e._v("：节点名称(nodeName 始终包含 HTML 元素的大写字母标签名) nodeName 是只读的")]),e._v(" "),a("p",[e._v("2.元素节点的 nodeName 与标签名相同")]),e._v(" "),a("p",[e._v("3.属性节点的 nodeName 与属性名相同（元素.getAttributeNode(“属性名”)获取属性节点）4.文本节点的 nodeName 始终是 #text（通过元素的子节点获取）")]),e._v(" "),a("p",[e._v("5.注释节点的nodeName是#comment（通过元素的子节点获取）")]),e._v(" "),a("p",[e._v("6.文档节点的 nodeName 始终是 #document")]),e._v(" "),a("p",[e._v("7."),a("strong",[e._v("nodeValue")]),e._v("：节点值 （设置或返回节点的值）")]),e._v(" "),a("p",[e._v("8.元素节点的 nodeValue 是 undefined 或 null")]),e._v(" "),a("p",[e._v("9.属性节点的 nodeValue 是属性值")]),e._v(" "),a("p",[e._v("10.文本节点的 nodeValue 是文本本身")]),e._v(" "),a("p",[e._v("11.注释节点的nodeValue是注释里面的内容")]),e._v(" "),a("p",[e._v("12.文档节点的nodeValue 是null")]),e._v(" "),a("p",[e._v("13."),a("strong",[e._v("nodeType")]),e._v("：节点类型")]),e._v(" "),a("p",[e._v("14.元素 element 1")]),e._v(" "),a("p",[e._v("15.属性 attr 2")]),e._v(" "),a("p",[e._v("16.文本 text 3")]),e._v(" "),a("p",[e._v("17.注释 comments 8")]),e._v(" "),a("p",[e._v("18.文档 document 9")]),e._v(" "),a("p",[a("em",[e._v("例:")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<body>\n<p id = "p" class = "abc">您好</p>\n<script>\n    var p = document.getElementById(\'p\');\n    p.nodeName      P\n    p.nodeValue     null\n    p.nodeType     1     元素节点\n    var text = p.firstChild;\n    text.nodeName     #text\n    text.nodeValue     您好\n    text.nodeType     3     文本节点\n    var attrNode = p.getAttributeNode("id");\n    attrNode.nodeName     id\n    attrNode.nodeValue     p\n    attrNode.nodeType     2     属性节点\n <\/script>\n </body>\n')])])]),a("h2",{attrs:{id:"第二章-document对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二章-document对象"}},[e._v("#")]),e._v(" 第二章:document对象")]),e._v(" "),a("h3",{attrs:{id:"_2-1获取节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1获取节点"}},[e._v("#")]),e._v(" 2.1获取节点")]),e._v(" "),a("h4",{attrs:{id:"_1-getelementbyid-id名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-getelementbyid-id名"}},[e._v("#")]),e._v(" 1.getElementById('id名')")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("根据元素的id名来获取节点\n\n**IE5以下不兼容**\n")])])]),a("h4",{attrs:{id:"_2-getelementsbytagname-标签名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-getelementsbytagname-标签名"}},[e._v("#")]),e._v(" 2.getElementsByTagName('标签名')")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("根据元素的标签名来获取节点.一个文档中可能会存在很多相同的标签名,因此用此方法获取到的是多个element组成的集合\n")])])]),a("h4",{attrs:{id:"_3-getelementsbyname-name"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-getelementsbyname-name"}},[e._v("#")]),e._v(" 3.getElementsByName('name')")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("根据标签的name属性来获取节点,返回的也是多个element组成的集合;\n\n**注:**不是所有标签都有name属性,只有 **表达标签** 才有name属性(切某些低版浏览器不支持)\n")])])]),a("h4",{attrs:{id:"_4-queryselector-css选择器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-queryselector-css选择器"}},[e._v("#")]),e._v(" 4.querySelector('css选择器')")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("参数:指定一个或多个匹配元素的css选择器.可以用id, 类, 类型,属性,属性值等来选取元素.\n")])])]),a("p",[e._v("对于多个选择器,使用逗号隔开,返回一个匹配的元素,")]),e._v(" "),a("p",[e._v("返回值:匹配指定css选择器的第一个元素, 若没找到,返回null.")]),e._v(" "),a("p",[e._v("document.querySelector   获取第一个")]),e._v(" "),a("p",[e._v('var p = document.querySelector("#box > p"); //box 这个 id 下的 p标签')]),e._v(" "),a("p",[e._v("console.log(p);")]),e._v(" "),a("p",[e._v("=>")]),a("p",[e._v("abc")]),a("p"),e._v(" "),a("h4",{attrs:{id:"_5-queryselectorall-css选择器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-queryselectorall-css选择器"}},[e._v("#")]),e._v(" 5.querySelectorAll('css选择器')")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("获取满足选择器里的所有标签\n")])])]),a("h4",{attrs:{id:"_6-documentelement-元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-documentelement-元素"}},[e._v("#")]),e._v(" 6.documentElement(元素)")]),e._v(" "),a("blockquote",[a("p",[e._v("documentElement 属性以一个元素对象返回一个文档的文档元素。HTML 文档返回对象为 "),a("strong",[e._v("HTML元素")]),e._v("。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<body>\n    <script type="text/javascript">\n        alert(document.documentElement.nodeName);    // html\n        alert(document.documentElement.nodeValue);    // null\n        alert(document.documentElement.nodeType);    // 1\n    <\/script>\n</body>\n')])])]),a("h3",{attrs:{id:"_2-2-node关系-获取操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-node关系-获取操作"}},[e._v("#")]),e._v(" 2.2 Node关系 获取操作")]),e._v(" "),a("h4",{attrs:{id:"_1-节点与节点之间的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-节点与节点之间的关系"}},[e._v("#")]),e._v(" 1.节点与节点之间的关系")]),e._v(" "),a("p",[e._v("父（parent）节点 父节点拥有任意数量的子节点")]),e._v(" "),a("p",[e._v("子（child）节点 子节点拥有一个父节点")]),e._v(" "),a("p",[e._v("兄弟（sibling）节点 同级的子节点被称为同胞（兄弟或姐妹）。")]),e._v(" "),a("p",[e._v("同胞是拥有相同父节点的节点根 (root) 节点")]),e._v(" "),a("p",[e._v("一个文档只能有一个根节点。")]),e._v(" "),a("p",[e._v("对html文档来说，根节点就是documentElement。")]),e._v(" "),a("p",[e._v("根节点不可能有父节点")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://github.com/LinDaiDai/JavaScript/blob/master/DomImg/img2.png?raw=true",alt:"img2"}})]),e._v(" "),a("h4",{attrs:{id:"_2-获取操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-获取操作"}},[e._v("#")]),e._v(" 2.获取操作")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('var div = document.querySelector("div");\nvar allNodes = div.childNodes;          //childNodes会把所有类型节点都获取到,包裹元素节点,文本节点(空格换行符等),属性节点;\n\n但主要是为了获取元素节点(nodeType为1)\n方法1:\nfor( var c in allNode){\nif( c.nodeType ==1){\ndocument.write(c)\n}\n}\n方法2:\nvar allNodes = div.children;          //div的所有子节点(只有元素节点,不包裹文本等其他节点)\nvar count = div.childElementCount;     //div的所有子节点的个数 ,也可以之间用 allNodes.length;\nvar firstChild = div.firstElementChild;     //div的第一个元素节点\nvar lastChild = div.lastElementChild;          //div的最后一个元素节点\nvar secondChild = div.firstElementChild.nextElementSibling;     //div的第二个元素节点\nvar lastSecondChild = div.lastElementChild.previousElementSibling;     //div的倒数第二个元素节点\ndiv == div.firstElementChild.parentNode;                              //div的第一个元素节点的父节点就是div本身\n注:若把 children 换为childNodes 以及把后面全部的Element去掉,则会选取所有类型的节点\n')])])]),a("h4",{attrs:{id:"_3-创建修改操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-创建修改操作"}},[e._v("#")]),e._v(" 3.创建修改操作")]),e._v(" "),a("h5",{attrs:{id:"_3-1-createtextnode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-createtextnode"}},[e._v("#")]),e._v(" 3.1 createTextNode( )")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('\t创建文本节点\n\n`var text = document.createTextNode("这个是文本节点");`\n')])])]),a("h5",{attrs:{id:"_3-2-createelement"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-createelement"}},[e._v("#")]),e._v(" 3.2 createElement( )")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('\t创建元素节点\t\n\n\t可以是 div  p   span  ul  li 等\n\n`var ele = document.createElement("div");`\n')])])]),a("h5",{attrs:{id:"_3-3-appendchild"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-appendchild"}},[e._v("#")]),e._v(" 3.3 appendChild( )")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("给一个元素追加child节点\n\n`document.body.appendChild(ele); //添加到body的最后一个子节点之后; `\n")])])]),a("h5",{attrs:{id:"_3-4-insertbefore"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-insertbefore"}},[e._v("#")]),e._v(" 3.4 insertBefore( )")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("fatherNode.insertBefore(newNode, existingNode);\n\n参数:\t1.要插入的节点\t2.目标节点\n\n在一个节点前插入一个节点\n")])])]),a("p",[e._v("将一个新创建的元素插入到某个元素之前")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v(" 如:在ul中,有3个li ,要将新创建的一个li 插入到第一位,\n      ul.insertBefore(li,ul.firstElementChild);\n    将li 插入到最后一位:\n      1.ul.appendChild(li);\n      2.ul.insertBefore(li,null/undefined);\t\t\t\n")])])]),a("h5",{attrs:{id:"_3-5-removechild"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-removechild"}},[e._v("#")]),e._v(" 3.5 removeChild( )")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("移除子节点\n\nfatherNode.removeChild(node)\n")])])]),a("h5",{attrs:{id:"_3-6-replacechild"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-replacechild"}},[e._v("#")]),e._v(" 3.6 replaceChild( )")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("fatherNode.replaceChild(newNode,existingNode)\n\n替换子节点\n")])])]),a("h5",{attrs:{id:"_3-7-clonenode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-clonenode"}},[e._v("#")]),e._v(" 3.7 cloneNode( )")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("node.cloneNode(deep)\n\n克隆节点\n\n参数 deep 可以指定节点的精确克隆\n\n\t1.若不写参数,只拷贝当前的这个元素节点,不包过它的子节点\n\n\t2.参数为 **true** ,**它还将递归复制当前节点的所有子孙节点**.\t\n")])])]),a("h4",{attrs:{id:"_4-元素属性操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-元素属性操作"}},[e._v("#")]),e._v(" 4.元素属性操作")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('##### 4.1 getAttribute( ):获取属性值\n\n\n\n<ul id = "abc" class = "one">\n如 获取 ul 的 id \n     console.log(ul.getAttribute("id"));\n => abc\n##### 4.2 setAttribute( ):\n')])])]),a("p",[e._v("添加或设置属性值")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('      1.如将 ul 的 id 名更换  \n          div.setAttribute("id" , "box")\n          ul 的 id 变为 box \n      2.将 ul 的class 再添加俩个类名\n           div.setAttribute("class" , div.getAttribute("class") + " two");\n##### 4.3 removeAttribute( )\n\n*element*.removeAttribute(*attributename*)\n\n参数：必需。规定要删除的属性的名称\n\n*例:* 一个可以转换形态的按钮\n\n<body>  \n<input id="input1" type="button" value="点我可以转换我的状态" onclick="myFunction();">\n<script>\n    function myFunction() {            \n        var input1 = document.getElementById("input1");\n        var typeValue = input1.getAttribute("type");\n        if(typeValue){\n            input1.removeAttribute("type");    //如果type属性有值就把这个属性去掉\n        }else {\n            input1.setAttribute("type", "button");    //如果type属性不存就添加属性。\n        }\n    };\n<\/script>   \n</body>\n')])])]),a("h5",{attrs:{id:"_4-4-hasattribute"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-hasattribute"}},[e._v("#")]),e._v(" 4.4 hasAttribute( )")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("element.hasAttribute(attributename)\n\n参数：必须。判断指定的属性名是否存在。\n")])])]),a("h4",{attrs:{id:"_5-元素节点的常用属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-元素节点的常用属性"}},[e._v("#")]),e._v(" 5.元素节点的常用属性")]),e._v(" "),a("h5",{attrs:{id:"_5-1-基本属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-基本属性"}},[e._v("#")]),e._v(" 5.1 基本属性")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('div.nodeName   所有节点都有\n\ndiv.tagName     只针对元素节点\n\ndiv.id           获取id\n\ndiv.id = "abc"    增加/替换 id\n\ndiv.className = "one"    增加/替换 class\n\nchecked 属性     表单标签特有的\n')])])]),a("h5",{attrs:{id:"_5-2-innerhtml属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-innerhtml属性"}},[e._v("#")]),e._v(" 5.2 innerHTML属性")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("innerHTML 属性设置或返回标签的开始和结束标签之间的 HTML。\n\n值为为文本\t\n\n若要改变innerHTML(**要改变的值一定要放在.innerHTML之后**); \n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var num =5;  num=\"我是字符串\";   num=true;\nvar span = document.getElementById('span').innerHTML=num;     正确写法\nalert(typeof(span));     //num是什么属性或者赋值给它的是什么属性, span就是什么属性;\nvar span = document.getElementById('span').innerHTML;\nspan = num;                                                  错误写法\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('1.利用innerHTML 获取标签内的所有内容,返回一个字符串\nalert(box.innerHTML); //获取这个元素节点里的文本(包含HTML标签),类型为string\n正常浏览器显示:    <span>我是span</span>\nIE                 <SPAN>我是span</SPAN>\n\n2.利用innerHTML 设置一个字符串,会把字符串中的有效的标签解析出来.\n  如,给div标签中添加一个内容是 "abc" 的p 标签\n        var div = document.querySelector(div);\n        div.innerHTML = "<p>abc</p>";\n')])])]),a("p",[e._v("​")]),e._v(" "),a("h5",{attrs:{id:"_5-3-innertext属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-innertext属性"}},[e._v("#")]),e._v(" 5.3 innerText属性")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("1.innerText值获取标签中的文本内容，子标签本身不会获取到。\n\n2.去修改的时候，即使带有标签也会把标签作为纯文本来对待，而不会解析为标签\n\n**注:和innerHTML不同,它并不会解析有效的标签,而是把它作为纯文本对待**\n")])])]),a("h5",{attrs:{id:"_5-4-outerhtml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-outerhtml"}},[e._v("#")]),e._v(" 5.4 outerHTML")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("1.**读取值** 把包过标签自身和它里面的内容都获取到    \n\n2.**设置值** 把标签用字符串来替换掉,如果字符串中有有效的标签,会被解析.\n\n**注:和innerHTML不同,它可以读取包过标签自身**\n")])])]),a("h5",{attrs:{id:"_5-5-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-value"}},[e._v("#")]),e._v(" 5.5 value")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("\t如果一个标签可以拥有value值，则可以可以通过element.value来获取。\n\n\t一般表单数据才具有vlaue：input、textarea、select\n")])])]),a("h5",{attrs:{id:"_5-6-获取元素的属性-offset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-获取元素的属性-offset"}},[e._v("#")]),e._v(" 5.6 获取元素的属性(offset)")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v("**注:** 以下四个属性只能读取 不能对元素进行修改;\n\n1.offsetWidth  \t获取元素的实际宽度\t包含border 和 padding 在内\n\n2.offsetHeight \t获取元素的实际高度\t包含border 和 padding 在内\n\n3.offsetLeft \t\t元素定位之后相对于参照物父容器的偏移\n\n4.offsetTop \t\t元素定位之后相对于参照物父容器的偏移\n")])])]),a("p",[e._v("​")]),e._v(" "),a("h4",{attrs:{id:"_6-样式表的属性-css脚本化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-样式表的属性-css脚本化"}},[e._v("#")]),e._v(" 6.样式表的属性--css脚本化")]),e._v(" "),a("h5",{attrs:{id:"_6-1-获取和修改行内样式表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-获取和修改行内样式表"}},[e._v("#")]),e._v(" 6.1 获取和修改行内样式表")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('2种方式访问到行内样式:\n\n\t1.element.style.css属性名    \n\n       2.element.style["css属性名"]\n')])])]),a("h5",{attrs:{id:"_6-2-获取内部样式表和外部样式表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-获取内部样式表和外部样式表"}},[e._v("#")]),e._v(" 6.2 获取内部样式表和外部样式表")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('1.对于IE: 对象.currentStyle["属性名"]     \n\n    2.其他浏览器: window.getComputedStyle(对象,null)["属性名"]\n')])])]),a("h5",{attrs:{id:"_6-3-字符串模板"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-字符串模板"}},[e._v("#")]),e._v(" 6.3 字符串模板")]),e._v(" "),a("p",[a("code",[e._v("字符串${变量}")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("element.style.backgroundColor = `rgba(  \n       ${randomInt(0,255)},\n       ${randomInt(0,255)},\n       ${randomInt(0,255)},\n       ${Math.random()*0.+0.4}`;\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);